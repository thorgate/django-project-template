# You can also use the fallback image from docker hub: thorgate/django-template-ci:latest
image: registry.gitlab.com/thorgate-public/django-project-template/ci:latest

services:
  - docker:dind

variables:
  COMPOSE_DOCKER_CLI_BUILD: "1"
# - {% if cookiecutter.use_cypress == YES %}
  CYPRESS_DEFAULT_COMMAND_TIMEOUT: 60000
# - {% endif %}
# - {% if cookiecutter.use_auto_deploy == YES %}
  DPT_AUTO_DEPLOY_ENABLED: "true"
  ANSIBLE_CONFIG: "ansible-ci.cfg"
# - {% endif %}
  DOCKER_BUILDKIT: "1"
  DOCKER_DRIVER: overlay2
  DPT_VENV_CACHING: "1"
  EDIT_SETTINGS: "no"
  POSTGRES_PASSWORD: "{{ cookiecutter.repo_name }}"
  POSTGRES_USER: "{{ cookiecutter.repo_name }}"

before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

stages:
  - test
# - {% if cookiecutter.use_cypress == YES %}
  - test-cypress
# - {% endif %}
  - build
# - {% if cookiecutter.use_auto_deploy == YES %}
  - deploy
# - {% endif %}

test-django:
  stage: test
# - {% if cookiecutter.thorgate == YES %}
  tags:
    - thorgate
# - {% endif %}
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: "{{ cookiecutter.repo_name }}/coverage.xml"
      junit: "{{ cookiecutter.repo_name }}/report.xml"
  cache:
    key: django-cache
    paths:
      - .data/pycache/pip
      - .data/pycache/pypoetry
    policy: pull-push
  except:
    refs:
      - template  # Don't run CI on template branch, should not be required
    variables:
      - $CI_COMMIT_MESSAGE =~ /tests skip/
      - $CI_COMMIT_MESSAGE =~ /test skip/
      - $CI_COMMIT_MESSAGE =~ /\[no tests?\]/
  script:
    - make settings
    - docker compose build django
    - make run-python cmd='entrypoint.sh -- echo "Installed dependencies"'
    - make lint-py
    - make coverage-py
    - make ruff-lint-ci
    - make patch-coverage-py-paths

test-node:
  stage: test
# - {% if cookiecutter.thorgate == YES %}
  tags:
    - thorgate
# - {% endif %}
  coverage: '/All\sfiles.*?\s+(\d+(?:.\d+)?)/'
  cache:
    key: ci-node-cache
    paths:
      - .data/node_modules
      - .data/yarn
    policy: pull-push
  artifacts:
    reports:
      # - {% if cookiecutter.frontend_style == SPA or cookiecutter.frontend_style == SPA_NEXT %}
      coverage_report:
        coverage_format: cobertura
        path: app/coverage/cobertura-coverage.xml
      junit: app/coverage/junit.xml
      # - {% elif cookiecutter.frontend_style == WEBAPP %}
      coverage_report:
        coverage_format: cobertura
        path: webapp/coverage/cobertura-coverage.xml
      junit: webapp/coverage/junit.xml
      # - {% endif %}
  except:
    refs:
      - template  # Don't run CI on template branch, should not be required
    variables:
      - $CI_COMMIT_MESSAGE =~ /tests skip/
      - $CI_COMMIT_MESSAGE =~ /test skip/
      - $CI_COMMIT_MESSAGE =~ /\[no tests?\]/
  script:
    - make settings
    - docker compose build node
    - make node-install
    # - {% if cookiecutter.frontend_style == SPA or cookiecutter.frontend_style == SPA_NEXT %}
    # - CI_TEST_PROJECT_GENERATE
    - make extract-i18n
    # - CI_TEST_PROJECT_GENERATE
    - make generate-rtk-query-api
    # - {% endif %}
    - make lint-js
    - make coverage-js
    - make patch-coverage-js-paths

# - {% if cookiecutter.use_cypress == YES %}
test-cypress:
  stage: test-cypress
# - {%- if cookiecutter.thorgate == YES %}
  tags:
    - thorgate
# - {%- endif %}
  except:
    refs:
      - template  # Don't run CI on template branch, should not be required
    variables:
      - $CI_COMMIT_MESSAGE =~ /tests skip/
      - $CI_COMMIT_MESSAGE =~ /test skip/
      - $CI_COMMIT_MESSAGE =~ /\[no tests?\]/
  script:
    - make settings
    - make cypress CYPRESS_DEFAULT_COMMAND_TIMEOUT=${CYPRESS_DEFAULT_COMMAND_TIMEOUT}
# - {%- endif %}

build_compose_file:
  stage: build
  needs: []
  except:
    - template # Don't run CI on template branch, should not be required
  script:
    - make settings
# - {%- if cookiecutter.build_in_ci == YES %}
    - ./scripts/images/prod-version-env.sh >> .env
# - {%- endif %}
    # Ensure production images build also
    - docker compose -f docker-compose.production.yml build

# - {%- if cookiecutter.build_in_ci == YES %}
.publish_image:
  stage: build
  needs: []
  except:
    - template # Don't run CI on template branch, should not be required
  script:
    - ./scripts/images/publish-prod-image.sh ${PUBLISH_NAME} ${PUBLISH_DOCKER_FILE}

publish_django:
  extends: .publish_image
  variables:
    PUBLISH_NAME: django
    PUBLISH_DOCKER_FILE: Dockerfile-django.production

# - {%- if cookiecutter.frontend_style == SPA or cookiecutter.frontend_style == SPA_NEXT %}

publish_node:
  extends: .publish_image
  variables:
    PUBLISH_NAME: node
    PUBLISH_DOCKER_FILE: Dockerfile-node.production
# - {% endif %}{%- endif %}

# - {%- if cookiecutter.use_auto_deploy == YES %}
.deploy_to_env:
  stage: deploy
# - {%- if cookiecutter.thorgate == 'yes' %}
  tags:
    - office  # The deploys must execute on CI machines tagged with office to avoid need for VPN.
# - {%- endif %}
  except:
    refs:
      # Don't run CI on template branch, should not be required
      - template
    variables:
      # Allow ability to disable auto deployment
      - $DPT_AUTO_DEPLOY_ENABLED != "true"
      - $CI_JOB_MANUAL != "true" && $CI_COMMIT_MESSAGE =~ /skip[\- ]?deploy/
      - $CI_JOB_MANUAL != "true" && $CI_COMMIT_MESSAGE =~ /no[\- ]?deploy/
  variables: &auto_deploy_base_env_variables
    PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.pip"
    POETRY_CACHE_DIR: "${CI_PROJECT_DIR}/.pypoetry"
    # Workaround for https://docs.ansible.com/ansible/devel/reference_appendices/config.html#cfg-in-world-writable-dir
    ANSIBLE_CONFIG: "ansible-ci.cfg"
  cache:
    paths:
      - .pip/
      - .pypoetry/
  before_script:
    # Set up ssh dirs
    - mkdir -p ~/.ssh && chmod 0700 ~/.ssh
    # See https://docs.gitlab.com/ee/ci/ssh_keys/#verifying-the-ssh-host-keys
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts


.deploy_to_test:
  extends: .deploy_to_env
  variables:
    <<: *auto_deploy_base_env_variables
    DPT_AUTO_DEPLOY_ENVIRONMENT: test
    DPT_AUTO_DEPLOY_HOSTNAME: "{{ cookiecutter.test_host }}"
  script:
    # Note: For test deployments `DPT_AUTO_DEPLOY_TEST_VAULT_PASSWORD` secret should only be masked not protected. This is
    #        due to the fact that protected variables are only accessible in protected branches or tags.
    - ./scripts/deploy/autodeploy.sh ${DPT_AUTO_DEPLOY_ENVIRONMENT} ${DPT_AUTO_DEPLOY_HOSTNAME} ${DPT_AUTO_DEPLOY_TEST_VAULT_PASSWORD} ${CI_COMMIT_SHA}

deploy_to_test:
  extends: .deploy_to_test
  only:
    - master

manual_deploy_to_test:
  extends: .deploy_to_test
  when: manual

deploy_to_live:
  extends: .deploy_to_env
  variables:
    <<: *auto_deploy_base_env_variables
    DPT_AUTO_DEPLOY_ENVIRONMENT: live
    # TODO: Fill in correct value when live host is added
    DPT_AUTO_DEPLOY_HOSTNAME: "production.{{ cookiecutter.live_domain_name }}"
  script:
    # Create a new release in sentry
    - ./scripts/deploy/create-sentry-release.sh
    # Note: `DPT_AUTODEPLOY_LIVE_VAULT_PASSWORD` secret should only be masked and protected.
    - ./scripts/deploy/autodeploy.sh ${DPT_AUTO_DEPLOY_ENVIRONMENT} ${DPT_AUTO_DEPLOY_HOSTNAME} ${DPT_AUTODEPLOY_LIVE_VAULT_PASSWORD} ${CI_COMMIT_SHA}
    # Finalize sentry release
    - ./scripts/deploy/finalize-sentry-release.sh
  only:
    - tags  # Live deployments should only occur from tags
# - {%- endif %}
