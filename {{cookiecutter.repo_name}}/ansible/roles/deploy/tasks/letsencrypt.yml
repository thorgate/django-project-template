# - {% raw %}
- name: "Create certbot config"
  template:
      src: letsencrypt.conf
      dest: /etc/letsencrypt/configs/letsencrypt.{{ project }}.conf
      mode: 0600


- name: "Check if certificate has already been acquired"
  stat:
# - {% endraw %}
# -  {% if cookiecutter.frontend_style == SPA or cookiecutter.frontend_style == SPA_NEXT %}
# -    {% set LE_domain="{{ node_site_host }}" %}
# -  {% elif cookiecutter.frontend_style == WEBAPP %}
# -    {% set LE_domain="{{ django_site_host }}" %}
# -  {% endif %}
      path: /etc/letsencrypt/live/{{ LE_domain }}/fullchain.pem
# - {% raw %}
  register: fullchain_file


- name: "Create nginx config to retrieve initial certificate"
  template:
      src: initial-nginx.conf
      dest: /etc/nginx/sites-enabled/{{ project }}
      mode: 0600
  when: not fullchain_file.stat.exists


- name: "Update nginx config to retrieve updated certificate"
  # This ensures the conf file is updated in case new domains are added to the letsencrypt config
  #  after initial deploy. Ensuring the nginx config file is updated allows certbot to receive
  #  the updated certificate below.
  import_tasks: ../../helpers/update-nginx-config.yml
  when: fullchain_file.stat.exists


- name: "Reload nginx"
  import_tasks: ../../helpers/reload-nginx.yml


- set_fact:
    certbot_binary: ""


- name: "Check for certbot binary"
  shell: "command -v certbot"
  register: certbot_bin
  ignore_errors: yes


- name: "Check for certbot-auto binary"
  shell: "command -v certbot-auto"
  register: certbot_auto_bin
  ignore_errors: yes
  when: result is failed


- set_fact:
    certbot_binary: "certbot"
  when: certbot_bin is succeeded


- set_fact:
    certbot_binary: "certbot-auto"
  when: not certbot_binary and certbot_auto_bin is succeeded


- name: "Fail if certbot was not found"
  fail:
    msg: "Certbot was not found on the server. Please install it - https://certbot.eff.org/instructions"
  when: "certbot_binary == ''"


- name: "Retrieve certificate with certbot"
  command: "{{ certbot_binary }} certonly --noninteractive --agree-tos -c /etc/letsencrypt/configs/letsencrypt.{{ project }}.conf"
# - {% endraw %}
