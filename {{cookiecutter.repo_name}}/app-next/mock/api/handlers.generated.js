/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Run `make api` to re-generate.
 */
/* eslint-disable */
/* tslint:disable */
import { setupWorker, rest } from "msw";
import { faker } from "@faker-js/faker";
import { resolveBaseUrl } from "@lib/utils";

faker.seed(1);

const baseURL = resolveBaseUrl();
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  rest.post(`${baseURL}/api/auth/token/`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getAuthTokenCreate200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/api/auth/token/refresh/`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getAuthTokenRefreshCreate200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/api/auth/token/verify/`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getAuthTokenVerifyCreate200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/user/`, (_, res, ctx) => {
    const resultArray = [[ctx.status(200), ctx.json(getUserList200Response())]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/api/user/`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(201), ctx.json(getUserCreate201Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/user/:email/`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUserRetrieve200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/api/user/:email/`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUserUpdate200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/api/user/:email/`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUserPartialUpdate200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.delete(`${baseURL}/api/user/:email/`, (_, res, ctx) => {
    const resultArray = [[ctx.status(204)]];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/api/user/forgot_password`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUserForgotPasswordCreate200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/api/user/forgot_password/token`, (_, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(getUserForgotPasswordTokenCreate200Response()),
      ],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.get(`${baseURL}/api/user/me`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUserMeRetrieve200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.put(`${baseURL}/api/user/me`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUserMeUpdate200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.patch(`${baseURL}/api/user/me`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUserMePartialUpdate200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
  rest.post(`${baseURL}/api/user/signup`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUserSignupCreate200Response())],
    ];

    return res(...resultArray[next() % resultArray.length]);
  }),
];

export function getAuthTokenCreate200Response() {
  return {
    email: faker.internet.email(),
    password: faker.lorem.slug(1),
    access: faker.lorem.slug(1),
    refresh: faker.lorem.slug(1),
  };
}

export function getAuthTokenRefreshCreate200Response() {
  return {
    access: faker.lorem.slug(1),
    refresh: faker.lorem.slug(1),
  };
}

export function getAuthTokenVerifyCreate200Response() {
  return {
    token: faker.lorem.slug(1),
  };
}

export function getUserList200Response() {
  return {
    next: {
      pageNumber: 3,
      pageSize: 10,
    },
    previous: {
      pageNumber: 1,
      pageSize: 10,
    },
    results: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      lastLogin: faker.date.past(),
      isSuperuser: faker.datatype.boolean(),
      updated: faker.date.past(),
      email: faker.internet.email(),
      name: faker.person.fullName(),
      isStaff: faker.datatype.boolean(),
      isActive: faker.datatype.boolean(),
      created: faker.date.past(),
    })),
    nextUrl: "http://api.example.org/accounts/?pageNumber=4",
    previousUrl: "http://api.example.org/accounts/?pageNumber=2",
    totalCount: 123,
    current: {
      pageNumber: 1,
      pageSize: 10,
    },
    pageNumber: 1,
    pageSize: 10,
  };
}

export function getUserCreate201Response() {
  return {
    password: faker.lorem.slug(1),
    lastLogin: faker.date.past(),
    isSuperuser: faker.datatype.boolean(),
    updated: faker.date.past(),
    email: faker.internet.email(),
    name: faker.person.fullName(),
    isStaff: faker.datatype.boolean(),
    isActive: faker.datatype.boolean(),
    created: faker.date.past(),
  };
}

export function getUserRetrieve200Response() {
  return {
    lastLogin: faker.date.past(),
    isSuperuser: faker.datatype.boolean(),
    updated: faker.date.past(),
    email: faker.internet.email(),
    name: faker.person.fullName(),
    isStaff: faker.datatype.boolean(),
    isActive: faker.datatype.boolean(),
    created: faker.date.past(),
  };
}

export function getUserUpdate200Response() {
  return {
    lastLogin: faker.date.past(),
    isSuperuser: faker.datatype.boolean(),
    updated: faker.date.past(),
    email: faker.internet.email(),
    name: faker.person.fullName(),
    isStaff: faker.datatype.boolean(),
    isActive: faker.datatype.boolean(),
    created: faker.date.past(),
  };
}

export function getUserPartialUpdate200Response() {
  return {
    lastLogin: faker.date.past(),
    isSuperuser: faker.datatype.boolean(),
    updated: faker.date.past(),
    email: faker.internet.email(),
    name: faker.person.fullName(),
    isStaff: faker.datatype.boolean(),
    isActive: faker.datatype.boolean(),
    created: faker.date.past(),
  };
}

export function getUserForgotPasswordCreate200Response() {
  return {
    email: faker.internet.email(),
  };
}

export function getUserForgotPasswordTokenCreate200Response() {
  return {
    password: faker.lorem.slug(1),
    passwordConfirm: faker.lorem.slug(1),
    uidAndTokenB64: faker.lorem.slug(1),
  };
}

export function getUserMeRetrieve200Response() {
  return {
    password: faker.lorem.slug(1),
    lastLogin: faker.date.past(),
    isSuperuser: faker.datatype.boolean(),
    updated: faker.date.past(),
    email: faker.internet.email(),
    name: faker.person.fullName(),
    isStaff: faker.datatype.boolean(),
    isActive: faker.datatype.boolean(),
    created: faker.date.past(),
  };
}

export function getUserMeUpdate200Response() {
  return {
    password: faker.lorem.slug(1),
    lastLogin: faker.date.past(),
    isSuperuser: faker.datatype.boolean(),
    updated: faker.date.past(),
    email: faker.internet.email(),
    name: faker.person.fullName(),
    isStaff: faker.datatype.boolean(),
    isActive: faker.datatype.boolean(),
    created: faker.date.past(),
  };
}

export function getUserMePartialUpdate200Response() {
  return {
    password: faker.lorem.slug(1),
    lastLogin: faker.date.past(),
    isSuperuser: faker.datatype.boolean(),
    updated: faker.date.past(),
    email: faker.internet.email(),
    name: faker.person.fullName(),
    isStaff: faker.datatype.boolean(),
    isActive: faker.datatype.boolean(),
    created: faker.date.past(),
  };
}

export function getUserSignupCreate200Response() {
  return {
    email: faker.internet.email(),
    password: faker.lorem.slug(1),
    name: faker.person.fullName(),
  };
}

// This configures a Service Worker with the given request handlers.
export const startWorker = () => {
  const worker = setupWorker(...handlers);
  worker.start();
};
